# -*- mode: ruby -*-
# vi: set ft=ruby :

$BRIDGE_EXT = "enp4s0"
$VMMEM = "2048"
$VMCPU = "2"
$VMIMAGE = "generic/ubuntu2004"
$NODE_COUNT = 2
$CONTROL_IP = "172.31.1.5"
$DOMAIN1_IP = "172.31.1.11"
$DOMAIN2_IP = "172.31.1.12"

##### Insert your Kubernetes deployment commands here #####
$pod_deployment = <<-DEPLOYMENT
kubectl apply -f /vagrant/iro_kubernetes.yml
DEPLOYMENT
##### ----------------------------------------------- #####

$install = <<-INSTALL
swapoff -a
echo -e "\nvm.max_map_count=524288\n" | sudo tee -a /etc/sysctl.conf && sudo sysctl -w vm.max_map_count=524288
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable" | sudo tee /etc/apt/sources.list.d/docker.list
DEBIAN_FRONTEND=noninteractive apt-get update
DEBIAN_FRONTEND=noninteractive apt upgrade -y
DEBIAN_FRONTEND=noninteractive apt install -y alsa-ucm-conf \
apt-transport-https \
base-files \
base-passwd \
bash \
ca-certificates \
cloud-init \
containerd.io \
curl \
dash \
diffutils \
docker-ce-cli \
docker-ce \
eatmydata \
efibootmgr \
findutils \
gnupg \
grep \
grub-efi-amd64-bin \
grub-efi-amd64-signed \
gzip \
hostname \
init \
kubeadm \
kubectl \
kubelet \
libdebconfclient0 \
libeatmydata1 \
libpam-modules-bin \
libpam-modules \
libpam-runtime \
libpam0g \
libsodium23 \
libwrap0 \
linux-headers-generic \
linux-headers-virtual \
linux-image-virtual \
linux-virtual \
lsb-release \
mokutil \
ncurses-base \
ncurses-bin \
ncurses-term \
openssh-server \
openssh-sftp-server \
python3-distutils \
python3-importlib-metadata \
python3-jinja2 \
python3-json-pointer \
python3-jsonpatch \
python3-jsonschema \
python3-lib2to3 \
python3-markupsafe \
python3-more-itertools \
python3-nacl \
python3-pymacaroons \
python3-pyrsistent \
python3-serial \
python3-setuptools \
python3-zipp \
shim-signed \
ssh-import-id \
sysvinit-utils \
ubuntu-minimal \
ubuntu-server \
ubuntu-standard
INSTALL

$docker = <<-'DOCKER'
cat <<-EOF > /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
DOCKER

$fishy_config = <<-'FISHY'
#!/bin/bash
#Syntax: ./script.bash [control|domain1|domain2] IP-CONTROL IP-DOMAIN1 IP-DOMAIN2

echo "Deploying FISHY sandbox Kubernetes cluster..."
controls=$2
domain1=$3
domain2=$4
domain_config=""
ifaces=($(ip link show | grep -E "^.:|^..:" | awk '{ print $2 } ' | cut -d ':' -f1 | grep -Ev 'lo'))

for (( c=0; c<${#ifaces[@]}; c++ )); 
do
	if [[ $(/sbin/ip route | awk '/default/ { print $5 }') == ${ifaces[c]} ]]; then
		mainInterface=${ifaces[c]}
		echo "Building the sandbox using interface $mainInterface"
		break
	fi
	if [ $c -eq $((${#ifaces[@]} - 1)) ]; then
		mainInterface=${ifaces[0]}
		echo "WARNING! No default interface configured: Building the sandbox using interface $mainInterface"
	fi
done

echo "IP for domain 1: $domain1"
echo "IP for domain 2: $domain2"
echo "IP for control-services: $controls"
case "$1" in
control)
	domain_config="fishy-control-services"
	sudo ip link add vxlan1 type vxlan id 1969 dev $mainInterface dstport 4789
	sudo ip link set vxlan1 up
	sudo bridge fdb append to 00:00:00:00:00:00 dst $domain1 dev vxlan1
	sudo ip link add vxlan3 type vxlan id 1971 dev $mainInterface dstport 4789
	sudo ip link set vxlan3 up
	sudo bridge fdb append to 00:00:00:00:00:00 dst $domain2 dev vxlan3
	;;
domain1)
	domain_config="fishy-domain-1"
	sudo ip link add vxlan1 type vxlan id 1969 dev $mainInterface dstport 4789
	sudo ip link set vxlan1 up
	sudo bridge fdb append to 00:00:00:00:00:00 dst $controls dev vxlan1
	sudo ip link add vxlan2 type vxlan id 1970 dev $mainInterface dstport 4789
	sudo ip link set vxlan2 up
	sudo bridge fdb append to 00:00:00:00:00:00 dst $domain2 dev vxlan2
;;
domain2)
	domain_config="fishy-domain-2"
	sudo ip link add vxlan2 type vxlan id 1970 dev $mainInterface dstport 4789
	sudo ip link set vxlan2 up
	sudo bridge fdb append to 00:00:00:00:00:00 dst $controls dev vxlan2
	sudo ip link add vxlan3 type vxlan id 1971 dev $mainInterface dstport 4789
	sudo ip link set vxlan3 up
	sudo bridge fdb append to 00:00:00:00:00:00 dst $domain1 dev vxlan3
;;
esac
git clone https://github.com/Networks-it-uc3m/FISHY-Sandbox-development.git $HOME/FISHY-Sandbox-development &> /dev/null
sudo $HOME/FISHY-Sandbox-development/$domain_config/config_interfaces.bash
sudo hostnamectl set-hostname $domain_config
sudo kubeadm init --config $HOME/FISHY-Sandbox-development/clusterConfig.yaml
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl taint nodes --all node-role.kubernetes.io/master-
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sleep 20

git clone https://github.com/k8snetworkplumbingwg/multus-cni.git $HOME/multus-cni &> /dev/null
kubectl apply -f $HOME/multus-cni/deployments/multus-daemonset.yml
sudo rm -r $HOME/multus-cni
sleep 40

echo "Applying Kubernetes configuration files from FISHY-github/$domain_config/network_definitions/"
configs=$(dirname $(find $HOME/FISHY-Sandbox-development/$domain_config/network_definitions -name *.yaml) | sort -u)
for config in $configs
do
       echo "applying config $config..."
       kubectl create -f $config
done

sleep 5

kubectl create -f $HOME/FISHY-Sandbox-development/$domain_config/NED/
sudo rm -r $HOME/FISHY-Sandbox-development
echo "Node $domain_config ready!"
FISHY

Vagrant.configure("2") do |config|
  config.vm.define "control", primary: true do |control|
    control.vm.box = $VMIMAGE
    control.vm.hostname = "control"
    control.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_udp: false
    control.vm.provider "libvirt" do |v3|
      v3.memory = "#{$VMMEM}"
      v3.cpus = "#{$VMCPU}"
    end
    config.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--memory", "#{$VMMEM}"]
      v.customize ["modifyvm", :id, "--cpus", "#{$VMCPU}"]
    end
    control.vm.network "private_network", ip: "#{$CONTROL_IP}"
  #disable all the shell beeps
    control.vm.provision :shell,
      inline: "echo 'set bell-style none' >> /etc/inputrc \
        && echo 'set visualbell' >> /home/vagrant/.vimrc"
    control.vm.provision :shell, inline: $install
    control.vm.provision :shell, inline: $docker
    control.vm.provision :shell, inline: "systemctl restart docker"
    control.vm.provision :shell,
      inline: "sleep 10"
    control.vm.provision :shell,
      inline: $fishy_config, args: "control #{$CONTROL_IP} #{$DOMAIN1_IP} #{$DOMAIN2_IP}"
    control.vm.provision :shell, inline: $pod_deployment
  end

  (1..$NODE_COUNT).each do |i|
    config.vm.define "domain#{i}" do |domain|
      domain.vm.box = $VMIMAGE
      domain.vm.hostname = "domain#{i}"
      domain.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_udp: false
      domain.vm.provider "libvirt" do |v1|
        v1.memory = "#{$VMMEM}"
        v1.cpus = "#{$VMCPU}"
      end
      config.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--memory", "#{$VMMEM}"]
        v.customize ["modifyvm", :id, "--cpus", "#{$VMCPU}"]
      end
      domain.vm.network "private_network", ip: "172.31.1.1#{i}"

      domain.vm.provision :shell,
        inline: "sleep 10"
      domain.vm.provision :shell,
        inline: "echo 'set bell-style none' >> /etc/inputrc \
          && echo 'set visualbell' >> /home/vagrant/.vimrc"
      domain.vm.provision :shell, inline: $install
      domain.vm.provision :shell, inline: $docker
      domain.vm.provision :shell, inline: "systemctl restart docker"
      domain.vm.provision :shell,
        inline: $fishy_config, args: "domain#{i} #{$CONTROL_IP} #{$DOMAIN1_IP} #{$DOMAIN2_IP}"
    end
  end
end
